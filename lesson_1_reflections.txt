How did viewing a diff between two versions of a file help you see the bug that was introduced?

It didn't. The two files were identical, with the same error. I might have screwed up in downloading them, but I don't think so.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

There are a few ways I guess. You could use it to look over your old code and learn from mistakes. You could use it to be able to revert to an earlier version of something you wrote if you decide that it worked better than the new version. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?


The pros of manual commits over automated are that you don't have to wade through as massive a pile of commits to find the change you're looking for. If you're trying to trace a bug that was introduced in yesterday's build, using google docs you may have to difference a hundred commits. If it was manual, you're going to have fewer to look through. Also, you're less likely to have commits that won't compile. The disadvantages are that when it's manual, you have to remember to do it, and you have to have some sort of discipline to do it well.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

In most non-development cases, a repository is not really useful or practical. 

How can you use the commands git log and git diff to view the history of files?

right now it looks like it's pretty rough doing that. I assume there's another more robust way of doing it.

How might using version control make you more confident to make changes that could break something?

I can always go back and find where the bug was, and even revert to a previous version if needed

Now that you have your workspace set up, what do you want to try using Git for?

No idea. 